
* init.org
** About Me
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Johnson Denen"
        user-mail-address "johnson.denen@gmail.com")
#+END_SRC
** Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq backup-directory-alist '(("." . "~/tmp")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'ruby-mode)
  (setq initial-scratch-message "# Ruby scratch \n\n")
#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Andale-Mono-10"))
  (set-face-attribute 'default t :font "Andale-Mono-10")
#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(require 'term)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defadvice term-handle-exit
    (after term-kill-buffer-on-exit activate)
  (let ((term-name (buffer-name)))
    (progn
      (bury-buffer)
      (kill-buffer term-name))))
#+END_SRC
** Registers
#+BEGIN_SRC emacs-lisp
  (mapcar
   (lambda (r)
     (set-register (car r) (cons 'file (cdr r))))
   '((?i . "~/.emacs.d/config.org")
     (?b . "~/.bashrc")
     (?c . "~/vc-docs/cscc.org")
     (?g . "~/vc-docs/grad.org")
     (?d . "~/vc-docs/defects.org")
     (?j . "~/vc-docs/johnson.org")))
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp
  (defun my/installer (package)
    "Install PACKAGE unless it's already installed."
    (unless (package-installed-p package)
      (progn
        (package-install package)))
    (require package))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    (my/installer 'use-package)
  (my/installer 'ace-jump-mode)
  (my/installer 'key-chord)
  (my/installer 'feature-mode)
  (my/installer 'hydra)
  (my/installer 'guide-key)
  (my/installer 'helm)
  (my/installer 'git-gutter)
  (my/installer 'expand-region)
  (my/installer 'exec-path-from-shell)
  (my/installer 'json-reformat)
  (my/installer 'magit)
  (my/installer 'smartparens)
  (my/installer 'projectile)
  (my/installer 'helm-projectile)
  (my/installer 'robe)
  (my/installer 'rubocop)
  (my/installer 'rspec-mode)
  (my/installer 'yaml-mode)
  (my/installer 'yard-mode)
  (my/installer 'undo-tree)
  (my/installer 'helm-swoop)
  (my/installer 'ample-theme)
  (my/installer 'groovy-mode)
#+END_SRC
*** Ace jump
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode)
#+END_SRC
*** Auto complete
#+BEGIN_SRC emacs-lisp
  (require 'auto-complete)
  (use-package auto-complete
    :init
    (progn
      (ac-config-default)
      (add-hook 'robe-mode-hook 'ac-robe-setup)))
#+END_SRC
*** Babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ruby . t)
     (sh . t)
     (emacs-lisp . t)))
#+END_SRC
*** Chords
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :init
    (progn
      (key-chord-mode 1)
      (key-chord-define-global "yy" 'helm-show-kill-ring)
      (key-chord-define-global "jj" 'ace-jump-char-mode)
      (key-chord-define-global "jl" 'ace-jump-line-mode)
      (key-chord-define-global "jb" 'ace-jump-mode-pop-mark)
      (key-chord-define-global "jr" 'jump-to-register)
      (key-chord-define-global "jt" 'my/bash)
      (key-chord-define-global "jp" 'my/pry)
      (key-chord-define-global "jw" 'ace-jump-word-mode)
      (key-chord-define-global "BB" 'my/binding.pry)
      (key-chord-define-global ";;" 'my/expand-region)
      (key-chord-define-global "uu" 'my/undo)
      (key-chord-define-global "HH" 'my/hl)
      (key-chord-define-global "UU" 'my/unhl)
      (key-chord-define-global "MM" 'magit-status)))
#+END_SRC
*** Cucumber
#+BEGIN_SRC emacs-lisp
  (use-package feature-mode
  :init
  (setq feature-cucumber-command "bundle exec cucumber -r features"))
#+END_SRC
*** Exec path
#+BEGIN_SRC emacs-lisp
  (when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
*** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region)
#+END_SRC
*** Groovy
#+BEGIN_SRC emacs-lisp
  (use-package groovy-mode)
#+END_SRC
*** Gutter
#+BEGIN_SRC emacs-lisp
  (fringe-mode '(4 . 4))
  (use-package git-gutter
    :diminish git-gutter-mode
    :init (global-git-gutter-mode +1))
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :diminish helm-mode
    :init
    (progn
      (helm-mode 1)
      (require 'helm-config)
      (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
      (define-key helm-map (kbd "C-z") 'helm-select-action)
      (setq helm-quick-update                     t
            helm-split-window-in-side-p           t
            helm-buffers-fuzzy-matching           t
            helm-move-to-line-cycle-in-source     t
            helm-ff-search-library-in-sexp        t
            helm-scroll-amount                    8
            helm-ff-file-name-history-use-recentf t))
    :bind
    ("C-x m" . helm-M-x))
#+END_SRC
*** Help
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :diminish guide-key-mode
    :init
    (progn
      (guide-key-mode 1)
      (setq guide-key/guide-key-sequence '("C-x" "C-c"))
      (setq guide-key/idle-delay 1.5)
      (setq guide-key/recursive-key-sequence-flag t)))
#+END_SRC
*** Hydra
#+BEGIN_SRC emacs-lisp
  
#+END_SRC
*** JSON
#+BEGIN_SRC emacs-lisp
  (use-package json-reformat
  :init (setq json-reformat:indent-width 2))
#+END_SRC
*** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :init
  (setq magit-push-always-verify nil))
#+END_SRC
*** Org
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-log-done 'time)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("d" "Defect" entry (file+olp "~/vc-docs/defects.org" "New")
           "* TODO %^{summary} %t\n %?")))
#+END_SRC
*** Parens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
  :diminish smartparens-mode
  :init
  (progn
    (require 'smartparens-config)
    (require 'smartparens-ruby)
    (smartparens-global-mode 1)
    (show-smartparens-global-mode 1)))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init (projectile-global-mode t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package helm-projectile
    :init (helm-projectile-on))
#+END_SRC
*** RSpec
#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode
  :diminish rspec-mode
  :init
  (progn
    (setq rspec-use-rake-when-possible nil)
    (add-to-list 'rspec-primary-source-dirs "factories")
    (setq rspec-command-options "--format progress"))
  :bind
  ("C-c , T" . rspec-find-spec-or-target-other-window))
#+END_SRC
*** Rubocop
#+BEGIN_SRC emacs-lisp
  (use-package rubocop)
#+END_SRC
*** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :init 
    (add-hook 'ruby-mode-hook 'robe-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package yard-mode
    :diminish yard-mode
    :init (add-hook 'ruby-mode-hook 'yard-mode))
#+END_SRC
*** Swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop
    :bind
    ("C-s" . helm-swoop)
    ("C-M-S" . helm-multi-swoop))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
  (load-theme 'ample t)
  (set-face-attribute 'default nil :height 96)
  (set-face-attribute 'fringe nil :background "#2d2d2d")
  (set-face-attribute 'vertical-border nil :foreground (face-attribute 'fringe :background))
  (add-to-list 'default-frame-alist '(height . 40))
  (add-to-list 'default-frame-alist '(width . 90))
#+END_SRC
*** Undo
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init (global-undo-tree-mode 1))
#+END_SRC
*** YAML
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode)
#+END_SRC
** Custom
*** Expand
#+BEGIN_SRC emacs-lisp
  (defun my/expand-region ()
    "Expand region into hydra."
    (interactive)
    (progn
      (er/expand-region 1)
      (hydra/expand/body)))
#+END_SRC
*** Highlights
#+BEGIN_SRC emacs-lisp
(defun my/hl ()
  "Highlight word at point."
  (interactive)
  (setq my/hl-phrase (thing-at-point 'word))
  (highlight-phrase my/hl-phrase))

(defun my/unhl ()
  "Unhighlight previously highlighted word."
  (interactive)
  (unhighlight-regexp my/hl-phrase))
#+END_SRC
*** Hydras
#+BEGIN_SRC emacs-lisp
  (defhydra hydra/undo ()
    "Undo"
    ("u" undo-tree-undo "Undo")
    ("r" undo-tree-redo "Redo")
    ("q" keyboard-quit "Quit" :exit t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defhydra hydra/expand ()
    "Expand"
    ("x" er/expand-region "Expand")
    ("c" er/contract-region "Contract")
    ("w" kill-region "Kill")
    ("y" yank "Yank")
    ("m" helm-M-x "Command")
    ("q" keyboard-quit "Quit" :exit t))
#+END_SRC
*** KBDs
#+BEGIN_SRC emacs-lisp
  (bind-key "C-x k" 'bury-buffer)
  (bind-key "C-x C-k" 'kill-this-buffer)
  (bind-key "C-+" 'text-scale-increase)
  (bind-key "C--" 'text-scale-decrease)
  (bind-key "C-<" 'shrink-window-horizontally)
  (bind-key "C->" 'enlarge-window-horizontally)
  (bind-key "C-," 'shrink-window)
  (bind-key "C-." 'enlarge-window)
  (bind-key "C-c c" 'org-capture)
  (bind-key "s-b" 'backward-sexp)
  (bind-key "s-f" 'forward-sexp)
#+END_SRC
*** Ruby
#+BEGIN_SRC emacs-lisp
  (defun my/binding.pry ()
    "Insert binding.pry."
    (interactive)
    (insert-before-markers "require 'pry'; binding.pry"))
#+END_SRC
*** Terminal
#+BEGIN_SRC emacs-lisp
  (defun my/term-finder (tname cmd)
    "Switch to or open a term buffer."
    (let ((term-name (concat "*" tname "*")))
      (if (get-buffer term-name)
          (switch-to-buffer term-name)
        (ansi-term cmd tname))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun my/bash ()
    "Open terminal to bash."
    (interactive)
    (my/term-finder "bash" "/bin/bash"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun my/pry ()
    "Open terminal to Pry."
    (interactive)
    (my/term-finder "pry" "Pry"))
#+END_SRC
*** Undo
#+BEGIN_SRC emacs-lisp
  (defun my/undo ()
    "Undo last edit into hydra."
    (interactive)
    (progn
      (undo-tree-undo)
      (hydra/undo/body)))
#+END_SRC
