** init.org
*** Introduction
#+BEGIN_SRC bash
git clone git@github.com:jdenen/.emacs.d ~/.emacs.d
#+END_SRC
*** Org config
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC
*** User info
#+begin_src emacs-lisp
(setq user-full-name "Johnson Denen"
      user-mail-address "johnson.denen@gmail.com")
#+end_src
*** Packages
#+BEGIN_SRC emacs-lisp
(defun johnson/package-install (package)
  "Install PACKAGE if it has not already been installed."
  (unless (package-installed-p package)
    (package-install package)))

(johnson/package-install 'use-package)
(require 'use-package)
#+END_SRC
*** OSX
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'exec-path-from-shell)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
*** Basics
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(tool-bar-mode 0)
(menu-bar-mode 0)
(scroll-bar-mode 0)
(toggle-word-wrap 1)

(fset 'yes-or-no-p 'y-or-n-p)
(setq backup-directory-alist '(("." . "~/tmp")))
(setq tramp-default-method "ssh")

(johnson/package-install 'ample-theme)
(load-theme 'ample t)
(add-to-list 'default-frame-alist '(font .  "Droid Sans Mono-12"))
(set-face-attribute 'default t :font  "Droid Sans Mono-12")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq initial-major-mode 'ruby-mode)
(setq initial-scratch-message "# This is a Ruby scratch buffer. \n\n")
#+END_SRC
*** Help
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'guide-key)
(use-package guide-key
  :diminish guide-key-mode
  :init
  (progn
    (guide-key-mode 1)
    (setq guide-key/guide-key-sequence '("C-x" "C-c"))
    (setq guide-key/idle-delay 2.0)
    (setq guide-key/recursive-key-sequence-flag t)))
#+END_SRC
*** Projects
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'magit)
(use-package magit
  :diminish magit-auto-revert-mode
  :bind 
  ("C-x g" . magit-status))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(autoload 'svn-status "dsvn" "Run `svn status'." t)
(autoload 'svn-update "dsvn" "Run `svn update'." t)
(require 'vc-svn)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'projectile)
(use-package projectile
  :init 
  (projectile-global-mode t))
#+END_SRC
*** Helm
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'helm)
(use-package helm
  :diminish helm-mode
  :init
  (progn
    (helm-mode 1)
    (require 'helm-config)
    (global-unset-key (kbd "C-x c"))
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    (define-key helm-map (kbd "C-z")  'helm-select-action)
    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p      t))
    (setq helm-quick-update                     t
	  helm-split-window-in-side-p           t
	  helm-buffers-fuzzy-matching           t
	  helm-move-to-line-cycle-in-source     t
	  helm-ff-search-library-in-sexp        t
	  helm-scroll-amount                    8
	  helm-ff-file-name-history-use-recentf t))
  :bind
  ("C-x m" . helm-M-x)
  ("C-x y" . helm-show-kill-ring)
  ("M-."   . helm-etags-select)
  ("C-x h" . helm-command-prefix))

(johnson/package-install 'helm-projectile)
(use-package helm-projectile
  :init 
  (helm-projectile-on))

(johnson/package-install 'helm-swoop)
(use-package helm-swoop
  :bind
  ("C-s" . helm-swoop))
#+END_SRC
*** Powerline
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'powerline)
(use-package powerline
  :init
  (progn
    (display-time-mode 1)
    (powerline-default-theme)))
#+END_SRC
*** Programming
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'smartparens)
(use-package smartparens
  :diminish smartparens-mode
  :init
  (progn
    (smartparens-global-mode 1)
    (show-smartparens-global-mode 1)
    (require 'smartparens-config)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'expand-region)
(use-package expand-region
  :bind
  ("C-c C-q" . indent-region))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'company)
(use-package company
  :diminish company-mode
  :init 
  (global-company-mode 1)
  :bind 
  ("C-c C-c" . company-complete))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'goto-chg)
(use-package goto-chg)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'ace-jump-mode)
(use-package ace-jump-mode
  :bind 
  ("C-x j" . ace-jump-char-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'ace-window)
(use-package ace-window)
#+END_SRC
*** Registers
#+BEGIN_SRC emacs-lisp
(mapcar
 (lambda (r)
   (set-register (car r) (cons 'file (cdr r))))
 '((?i . "~/.emacs.d/config.org")
   (?b . "~/.bash_profile")
   (?c . "~/Documents/org/cscc.org")
   (?n . "~/Documents/org/nw.org")
   (?g . "~/Documents/org/csg.org")
   (?j . "~/Documents/org/johnson.org")))
#+END_SRC
*** Ruby
**** Documentation
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'yari)
(use-package yari)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'yard-mode)
(use-package yard-mode
  :init
  (add-hook 'ruby-mode-hook 'yard-mode))
#+END_SRC

**** Testing
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'feature-mode)
(use-package feature-mode
  :init
  (progn
    (setq feature-cucumber-command
      "bundle exec cucumber CUCUMBER_OPTS=\"{options}\" -p none -r features FEATURE=\"{feature}\"")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun johnson/given-step ()
  "Template for a new Given step."
  (interactive)
  (insert-before-markers "Given /^$/ do\n\nend\n")
  (while (progn
           (previous-line)
           (not (looking-at "^G"))))
  (while (progn
           (forward-char)
           (not (looking-at "[:$:]")))))

(defun johnson/when-step ()
  "Template for a new When step."
  (interactive)
  (insert-before-markers "When /^$/ do\n\nend\n")
  (while (progn
           (previous-line)
           (not (looking-at "^W"))))
  (while (progn
           (forward-char)
           (not (looking-at "[:$:]")))))

(defun johnson/then-step ()
  "Template for a new Then step."
  (interactive)
  (insert-before-markers "Then /^$/ do\n\nend\n")
  (while (progn
           (previous-line)
           (not (looking-at "^T"))))
  (while (progn
           (forward-char)
           (not (looking-at "[:$:]")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(johnson/package-install 'rspec-mode)
(use-package rspec-mode
  :init
  (progn
    (setq rspec-use-rake-when-possible nil)
    (setq rspec-command-options "--format progress")))
#+END_SRC
**** Pry
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'inf-ruby)
(use-package inf-ruby
  :init (add-hook 'ruby-mode-hook 'inf-ruby-minor-mode))

(autoload 'inf-ruby-minor-mode "inf-ruby" "Run an inferior Ruby process")
(add-hook 'ruby-mode-hook 'inf-ruby-minor-mode)
(setq inf-ruby-default-implementation "pry")
(setq inf-ruby-first-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)> *")
(setq inf-ruby-prompt-pattern "^\\[[0-9]+\\] pry\\((.*)\\)[>*\"'] *")

(defun comint-clear-buffer ()
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun johnson/pry-binding ()
  "Insert binding.pry."
  (interactive)
  (insert-before-markers "require 'pry'; binding.pry"))
#+END_SRC

**** Rake
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'rake)
(use-package rake)
#+END_SRC

**** Bundler
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'bundler)
(use-package bundler)
#+END_SRC

**** Linting
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'rubocop)
(use-package rubocop)
#+END_SRC

*** Text
**** JSON
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'json-reformat)
(use-package json-reformat
  :init
  (setq json-reformat:indent-width 2))
#+END_SRC

**** YAML
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'yaml-mode)
(use-package yaml-mode)
#+END_SRC

**** Markdown
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'markdown-mode)
(use-package markdown-mode)
#+END_SRC
*** Terminal
#+BEGIN_SRC emacs-lisp
(require 'term)
(defun johnson/find-ansi-term ()
  "Switch to or generate a terminal buffer."
  (interactive)
  (if (get-buffer "*ansi-term*")
      (switch-to-buffer "*ansi-term*")
    (ansi-term "/bin/bash")))

(defun johnson/ansi-term ()
  "Efficient terminal management."
  (interactive)
  (if (string= "term-mode" major-mode)
      (bury-buffer)
    (johnson/find-ansi-term)))

(defadvice term-handle-exit
    (after term-kill-buffer-on-exit activate)
  (kill-buffer-and-window))
#+END_SRC
*** Windows
#+BEGIN_SRC emacs-lisp
(winner-mode 1)

(johnson/package-install 'buffer-move)
(use-package buffer-move
  :bind
  ("<M-up>"    . buf-move-up)
  ("<M-left>"  . buf-move-left)
  ("<M-right>" . buf-move-right)
  ("<M-down>"  . buf-move-down))

(bind-key "C-x k" 'bury-buffer)
(bind-key "C-x C-k" 'kill-this-buffer)
(bind-key "C-+" 'text-scale-increase)
(bind-key "C--" 'text-scale-decrease)
(bind-key "C-<" 'shrink-window-horizontally)
(bind-key "C->" 'enlarge-window-horizontally)
(bind-key "C-," 'shrink-window)
(bind-key "C-." 'enlarge-window)
#+END_SRC
*** Chords
#+BEGIN_SRC emacs-lisp
(johnson/package-install 'key-chord)
(use-package key-chord
  :init
  (progn
    (key-chord-mode 1)
    (key-chord-define-global "jj" 'ace-jump-char-mode)
    (key-chord-define-global "kk" 'ace-window)
    (key-chord-define-global "uu" 'undo)
    (key-chord-define-global "BB" 'browse-url)
    (key-chord-define-global "cm" 'comint-clear-buffer)
    (key-chord-define-global "jt" 'johnson/ansi-term)
    (key-chord-define-global "jr" 'jump-to-register)
    (key-chord-define-global ";;" 'er/expand-region)
    (key-chord-define-global "WW" 'kill-region)
    (key-chord-define-global "yy" 'helm-show-kill-ring)
    (key-chord-define-global "aa" 'winner-undo)
    (key-chord-define-global "qq" 'winner-redo)
    (key-chord-define-global ",," 'helm-etags-select)
    (key-chord-define-global "\\\\" 'pop-tag-mark)
    (key-chord-define-global "JJ" 'json-reformat-region)
    (key-chord-define-global "gc" 'goto-last-change)
    (key-chord-define-global "GC" 'goto-last-change-reverse)
    (key-chord-define-global "MM" 'magit-status)
    (key-chord-define-global "VV" 'svn-status)
    (key-chord-define-global "VU" 'svn-update)))
#+END_SRC
